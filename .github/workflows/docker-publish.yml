# .github/workflows/docker-publish.yml

name: Build and Push Docker Image to GHCR

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ] # Trigger on pushes to the main branch
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Environment variables available to all jobs and steps
env:
  # IMPORTANT: Replace with your GitHub username or organization name
  REGISTRY_OWNER: neoKushan 
  # IMPORTANT: Replace with your repository name (must be lowercase)
  IMAGE_NAME: unemployed-bot 
  # IMPORTANT: Replace with the name of your project's output DLL (from Dockerfile ENTRYPOINT)
  PROJECT_DLL_NAME: omsirp.dll 
  # Define the webhook URL
  DEPLOY_WEBHOOK_URL: https://webhook.kushan.biz/hooks/omsirp

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    # Set permissions for the GITHUB_TOKEN for pushing to GHCR
    permissions:
      contents: read      # Needed to check out the repository
      packages: write     # Needed to push packages (container images) to GHCR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Checks out your repository code

      # Note: If your Dockerfile needs the PROJECT_DLL_NAME at build time (e.g., via ARG), 
      # you might need to pass it here using --build-arg. 
      # However, the provided Dockerfile uses it only in the ENTRYPOINT, 
      # so it doesn't need to be passed during the build itself.

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # GITHUB_TOKEN is automatically created by Actions, no need to set it as a secret
          username: ${{ github.actor }} 
          password: ${{ secrets.GITHUB_TOKEN }} 

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          # Define the image naming convention for GHCR
          images: ghcr.io/${{ env.REGISTRY_OWNER }}/${{ env.IMAGE_NAME }}
          # Example tags:
          # - ghcr.io/user/repo:latest (on default branch push)
          # - ghcr.io/user/repo:sha-xxxxxxx (commit SHA)
          tags: |
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the root of the repository
          file: ./Dockerfile # Path to the Dockerfile
          push: true # Actually push the image after building
          tags: ${{ steps.meta.outputs.tags }} # Use tags generated by metadata-action
          labels: ${{ steps.meta.outputs.labels }} # Add labels generated by metadata-action
          # Optional: Add build arguments if needed by your Dockerfile
          build-args: |
            GIT_COMMIT=${{ github.sha }}
          
      - name: Call deployment webhook
        # Only run this step if the previous steps were successful
        if: success() 
        run: |
          echo "Image pushed successfully. Calling deployment webhook at ${{ env.DEPLOY_WEBHOOK_URL }}..."
          # Send POST request. -f makes curl fail on server errors (4xx, 5xx)
          # -sS makes curl silent but still shows errors.
          # Add -H "Content-Type: application/json" -d '{}' if your hook needs a JSON body.
          # Add -H "Authorization: Bearer YOUR_TOKEN" or similar if your hook needs auth.
          curl -f -sS -X POST "${{ env.DEPLOY_WEBHOOK_URL }}"
          echo "Webhook call attempted."
